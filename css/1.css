/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* stylelint-enable color-no-hex */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Implementation of themes
 * generate sets of themes keys object property (dark / light)
 * @param $themes - themes property
 * Usage example:
   @include themify($themes) { color: themed('background_color') }
 */
/*
 * Generate typefaces key-value pair of themefy object
 * Should be inside themify mixins
 * Example:
   @include themify($themes) { border-color: 1px solid themed('background_color') }
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Themified Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* stylelint-enable color-no-hex */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Implementation of themes
 * generate sets of themes keys object property (dark / light)
 * @param $themes - themes property
 * Usage example:
   @include themify($themes) { color: themed('background_color') }
 */
/*
 * Generate typefaces key-value pair of themefy object
 * Should be inside themify mixins
 * Example:
   @include themify($themes) { border-color: 1px solid themed('background_color') }
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Themified Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/* @define dc-accordion */
.dc-accordion__wrapper {
  /* postcss-bem-linter: ignore */ }

.dc-accordion__wrapper > div:last-child {
  border-bottom-right-radius: 4px;
  border-bottom-left-radius: 4px;
  border-bottom-width: 1px; }

.dc-accordion__item {
  border: 1px solid #eaeaea;
  border-bottom-width: 0;
  color: var(--text-color-3);
  font-size: 1.4rem; }

.dc-accordion__item--first {
  border-top-right-radius: 4px;
  border-top-left-radius: 4px; }

.dc-accordion__item--open .dc-accordion__item-header {
  border-bottom: 1px solid #eaeaea; }

.dc-accordion__item--open .dc-accordion__item-content {
  display: block; }

.dc-accordion__item--close .dc-accordion__item-content {
  display: none; }

.dc-accordion__item-header {
  cursor: pointer;
  line-height: 1.43;
  padding: 8px 16px; }

.dc-accordion__item-header-icon {
  vertical-align: middle; }

.dc-accordion__item-header-icon-wrapper {
  float: right;
  padding-left: 16px; }

.dc-accordion__item-content {
  padding: 16px; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* stylelint-enable color-no-hex */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Implementation of themes
 * generate sets of themes keys object property (dark / light)
 * @param $themes - themes property
 * Usage example:
   @include themify($themes) { color: themed('background_color') }
 */
/*
 * Generate typefaces key-value pair of themefy object
 * Should be inside themify mixins
 * Example:
   @include themify($themes) { border-color: 1px solid themed('background_color') }
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Themified Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* stylelint-enable color-no-hex */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Implementation of themes
 * generate sets of themes keys object property (dark / light)
 * @param $themes - themes property
 * Usage example:
   @include themify($themes) { color: themed('background_color') }
 */
/*
 * Generate typefaces key-value pair of themefy object
 * Should be inside themify mixins
 * Example:
   @include themify($themes) { border-color: 1px solid themed('background_color') }
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Themified Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
.dc-field-error {
  position: absolute;
  top: 4rem;
  text-align: left !important;
  padding: 0 1.2rem;
  color: #ff444f;
  color: var(--color-red);
  font-size: 1.2rem;
  font-size: var(--text-size-xs); }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* stylelint-enable color-no-hex */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Implementation of themes
 * generate sets of themes keys object property (dark / light)
 * @param $themes - themes property
 * Usage example:
   @include themify($themes) { color: themed('background_color') }
 */
/*
 * Generate typefaces key-value pair of themefy object
 * Should be inside themify mixins
 * Example:
   @include themify($themes) { border-color: 1px solid themed('background_color') }
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Themified Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/* stylelint-disable color-no-hex */
:root {
  --color-black: #0e0e0e;
  --color-black-2: #2a2a2a;
  --color-black-3: #333333;
  --color-black-4: #182039;
  --color-white: #ffffff;
  --color-red: #ff444f;
  --color-red-1: #dd573a;
  --color-red-2: #ffc9cc;
  --color-red-3: #d43e47;
  --color-grey-1: #f4f4f4;
  --color-grey-2: #e8e8e8;
  --color-grey-3: #646464;
  --color-grey-4: #fafbfb;
  --color-grey-5: #c2c2c2;
  --color-grey: #9b9b9b;
  --color-green: #85acb0;
  --color-blue: #4c76be;
  --color-blue-2: #365899;
  --text-size-xs: 1.2rem;
  --text-size-s: 1.6rem;
  --text-size-sm: 2rem;
  --text-size-m: 2.4rem;
  --text-size-l: 3.2rem;
  --text-size-xl: 4.8rem;
  --text-size-xxl: 6.4rem;
  --brand-dark-grey: #0e0e0e;
  --brand-strong-red: #cc2e3d;
  --brand-red-coral: #ff444f;
  --brand-orange: #ff6444;
  --brand-secondary: #85acb0; }

:root .theme--dark {
  --text-color: var(--color-white);
  --text-color-3: var(--color-white);
  --icon-general: var(--color-grey-5); }

:root .theme--light {
  --text-color: var(--color-black);
  --text-color-3: var(--color-black-3);
  --icon-general: var(--color-black-3); }

/* stylelint-enable color-no-hex */
.dc-input {
  position: relative;
  width: 100%;
  border-radius: 4px;
  border: 1px solid #e8e8e8;
  border: 1px solid var(--color-grey-2);
  display: flex;
  align-items: center;
  margin-bottom: 1.8rem; }

.dc-input[focus-within] {
  border-color: #85acb0;
  border-color: var(--color-green); }

.dc-input:focus-within {
  border-color: #85acb0;
  border-color: var(--color-green); }

.dc-input__field {
  background: none;
  color: var(--text-color);
  font-size: 1.6rem;
  font-size: var(--text-size-s);
  padding: 1rem 1.2rem;
  width: 100%;
  height: 3.8rem;
  display: block; }

.dc-input__field::-webkit-input-placeholder {
  opacity: 0;
  transition: opacity 0.25s; }

.dc-input__field::-moz-placeholder {
  opacity: 0;
  transition: opacity 0.25s; }

.dc-input__field:-ms-input-placeholder {
  opacity: 0;
  transition: opacity 0.25s; }

.dc-input__field::-ms-input-placeholder {
  opacity: 0;
  transition: opacity 0.25s; }

.dc-input__field::placeholder {
  opacity: 0;
  transition: opacity 0.25s; }

.dc-input__field--placeholder-visible::-webkit-input-placeholder {
  opacity: 0.7; }

.dc-input__field--placeholder-visible::-moz-placeholder {
  opacity: 0.7; }

.dc-input__field--placeholder-visible:-ms-input-placeholder {
  opacity: 0.7; }

.dc-input__field--placeholder-visible::-ms-input-placeholder {
  opacity: 0.7; }

.dc-input__field--placeholder-visible::placeholder {
  opacity: 0.7; }

.dc-input__field:focus {
  outline: none; }

.dc-input__field:focus ~ label {
  transform: translate(-1.6rem, -2.2rem) scale(0.75);
  color: #85acb0;
  color: var(--color-green);
  padding: 0 4px; }

.theme--light .dc-input__field:focus ~ label {
  background-color: #ffffff; }

.theme--dark .dc-input__field:focus ~ label {
  background-color: #191c31; }

.dc-input__field:focus::-webkit-input-placeholder {
  opacity: 0.7; }

.dc-input__field:focus::-moz-placeholder {
  opacity: 0.7; }

.dc-input__field:focus:-ms-input-placeholder {
  opacity: 0.7; }

.dc-input__field:focus::-ms-input-placeholder {
  opacity: 0.7; }

.dc-input__field:focus::placeholder {
  opacity: 0.7; }

.dc-input__field:not(.dc-input--no-placeholder):not(:focus):valid ~ label {
  transform: translate(-1.6rem, -2.2rem) scale(0.75);
  color: var(--text-color-3);
  padding: 0 4px; }

.theme--light .dc-input__field:not(.dc-input--no-placeholder):not(:focus):valid ~ label {
  background-color: #ffffff; }

.theme--dark .dc-input__field:not(.dc-input--no-placeholder):not(:focus):valid ~ label {
  background-color: #191c31; }

.dc-input__field[type=number]::-webkit-inner-spin-button, .dc-input__field[type=number]::-webkit-outer-spin-button {
  -webkit-appearance: none;
  margin: 0; }

.dc-input__leading-icon {
  margin-left: 1rem;
  top: 0.7rem;
  position: absolute;
  left: 0;
  pointer-events: none;
  cursor: text;
  font-size: 1.6rem;
  font-size: var(--text-size-s); }

.dc-input__leading-icon + .dc-input__field {
  padding-left: calc(1rem + 11px); }

.dc-input__trailing-icon {
  margin: 0 1.2rem 0 0 !important; }

.dc-input__label {
  font-size: 1.6rem;
  font-size: var(--text-size-s);
  position: absolute;
  pointer-events: none;
  left: 1rem;
  top: 1rem; }

.dc-input:not(.dc-input--no-placeholder)__label {
  color: #9b9b9b;
  color: var(--color-grey);
  transition: 0.25s ease all;
  transform: translateZ(0); }

.dc-input--no-placeholder label {
  transform: translate(-1.6rem, -2.2rem) scale(0.75);
  color: #85acb0;
  color: var(--color-green);
  padding: 0 4px; }

.theme--light .dc-input--no-placeholder label {
  background-color: #ffffff; }

.theme--dark .dc-input--no-placeholder label {
  background-color: #191c31; }

